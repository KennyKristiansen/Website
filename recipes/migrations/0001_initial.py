# Generated by Django 3.1.2 on 2020-12-22 13:14

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
                ('first_name', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('change_message', models.TextField()),
                ('action_flag', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.TextField(blank=True)),
                ('amount', models.IntegerField(blank=True, null=True)),
                ('unit', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ingredient',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('index', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(blank=True, db_column='id', primary_key=True, serialize=False)),
                ('gruppe', models.TextField(blank=True, null=True)),
                ('navn', models.TextField(blank=True, db_column='Navn', null=True)),
                ('svind', models.IntegerField(blank=True, db_column='Svind', null=True)),
                ('energi_kj', models.IntegerField(blank=True, db_column='Energi-kJ', null=True)),
                ('energi_kcal', models.IntegerField(blank=True, db_column='Energi-kcal', null=True)),
                ('nitrogen_til_protein_faktor', models.FloatField(blank=True, db_column='Nitrogen-til-protein-faktor', null=True)),
                ('nitrogen_total', models.FloatField(blank=True, db_column='Nitrogen-total', null=True)),
                ('protein', models.FloatField(blank=True, db_column='Protein-videnskabelig', null=True)),
                ('protein_deklaration', models.FloatField(blank=True, db_column='Protein-deklaration', null=True)),
                ('kulhydrat_difference_field', models.FloatField(blank=True, db_column='Kulhydrat-difference-', null=True)),
                ('kulhydrat', models.FloatField(blank=True, db_column='Kulhydrat-tilgængelig', null=True)),
                ('kulhydrat_deklaration', models.FloatField(blank=True, db_column='Kulhydrat-deklaration', null=True)),
                ('tilsat_sukker', models.FloatField(blank=True, db_column='Tilsat-sukker', null=True)),
                ('kostfibre', models.FloatField(blank=True, db_column='Kostfibre', null=True)),
                ('fedt', models.FloatField(blank=True, db_column='Fedt-total', null=True)),
                ('fcf', models.FloatField(blank=True, db_column='FCF', null=True)),
                ('alkohol', models.FloatField(blank=True, db_column='Alkohol', null=True)),
                ('aske', models.FloatField(blank=True, db_column='Aske', null=True)),
                ('tørstof', models.FloatField(blank=True, db_column='Tørstof', null=True)),
                ('vand', models.FloatField(blank=True, db_column='Vand', null=True)),
                ('a_vitamin', models.FloatField(blank=True, db_column='A-vitamin', null=True)),
                ('retinol', models.FloatField(blank=True, db_column='Retinol', null=True)),
                ('beta_caroten', models.FloatField(blank=True, db_column='beta-caroten', null=True)),
                ('d_vitamin', models.FloatField(blank=True, db_column='D-vitamin', null=True)),
                ('d3_vitamin', models.FloatField(blank=True, db_column='D3-vitamin', null=True)),
                ('d2_ergocalciferol', models.FloatField(blank=True, db_column='D2-ergocalciferol', null=True)),
                ('e_vitamin', models.FloatField(blank=True, db_column='E-vitamin', null=True)),
                ('alfa_tokoferol', models.FloatField(blank=True, db_column='alfa-tokoferol', null=True)),
                ('gamma_tokoferol', models.FloatField(blank=True, db_column='gamma-tokoferol', null=True)),
                ('delta_tokoferol', models.FloatField(blank=True, db_column='delta-tokoferol', null=True)),
                ('alfa_tokotrienol', models.FloatField(blank=True, db_column='alfa-tokotrienol', null=True)),
                ('k1_vitamin', models.FloatField(blank=True, db_column='K1-vitamin', null=True)),
                ('b1_vitamin', models.FloatField(blank=True, db_column='B1-vitamin', null=True)),
                ('thiamin', models.FloatField(blank=True, null=True)),
                ('b2_vitamin_riboflavin', models.FloatField(blank=True, db_column='B2-vitamin-riboflavin', null=True)),
                ('niacinækv0alent', models.FloatField(blank=True, db_column='Niacinækv0alent', null=True)),
                ('niacin', models.FloatField(blank=True, db_column='Niacin', null=True)),
                ('b6_vitamin', models.FloatField(blank=True, db_column='B6-vitamin', null=True)),
                ('pantothensyre', models.FloatField(blank=True, db_column='Pantothensyre', null=True)),
                ('biotin', models.FloatField(blank=True, db_column='Biotin', null=True)),
                ('folat', models.FloatField(blank=True, db_column='Folat', null=True)),
                ('frit_folat', models.FloatField(blank=True, db_column='Frit-folat', null=True)),
                ('b12_vitamin', models.FloatField(blank=True, db_column='B12-vitamin', null=True)),
                ('c_vitamin', models.FloatField(blank=True, db_column='C-vitamin', null=True)),
                ('l_ascorbinsyre', models.FloatField(blank=True, db_column='L-ascorbinsyre', null=True)),
                ('l_dehydroascorbinsyre', models.FloatField(blank=True, db_column='L-dehydroascorbinsyre', null=True)),
                ('svovl_s', models.IntegerField(blank=True, db_column='Svovl-S', null=True)),
                ('chlorid_cl', models.FloatField(blank=True, db_column='Chlorid-Cl', null=True)),
                ('natrium_na', models.FloatField(blank=True, db_column='Natrium-Na', null=True)),
                ('kalium_k', models.FloatField(blank=True, db_column='Kalium-K', null=True)),
                ('calcium_ca', models.FloatField(blank=True, db_column='Calcium-Ca', null=True)),
                ('magnesium_mg', models.FloatField(blank=True, db_column='Magnesium-Mg', null=True)),
                ('fosfor_p', models.FloatField(blank=True, db_column='Fosfor-P', null=True)),
                ('jern_fe', models.FloatField(blank=True, db_column='Jern-Fe', null=True)),
                ('kobber_cu', models.FloatField(blank=True, db_column='Kobber-Cu', null=True)),
                ('zink_zn', models.FloatField(blank=True, db_column='Zink-Zn', null=True)),
                ('jod_i', models.FloatField(blank=True, db_column='Jod-I', null=True)),
                ('mangan_mn', models.FloatField(blank=True, db_column='Mangan-Mn', null=True)),
                ('chrom_cr', models.FloatField(blank=True, db_column='Chrom-Cr', null=True)),
                ('selen_se', models.FloatField(blank=True, db_column='Selen-Se', null=True)),
                ('molybdæn_mo', models.FloatField(blank=True, db_column='Molybdæn-Mo', null=True)),
                ('cobolt_co', models.FloatField(blank=True, db_column='Cobolt-Co', null=True)),
                ('nikkel_ni', models.FloatField(blank=True, db_column='Nikkel-Ni', null=True)),
                ('fluor_f', models.FloatField(blank=True, db_column='Fluor-F', null=True)),
                ('silicium_si', models.FloatField(blank=True, db_column='Silicium-Si', null=True)),
                ('rubidium_rb', models.IntegerField(blank=True, db_column='Rubidium-Rb', null=True)),
                ('aluminium_al', models.FloatField(blank=True, db_column='Aluminium-Al', null=True)),
                ('bor_b', models.IntegerField(blank=True, db_column='Bor-B', null=True)),
                ('brom_br', models.IntegerField(blank=True, db_column='Brom-Br', null=True)),
                ('kviksølv_hg', models.FloatField(blank=True, db_column='Kviksølv-Hg', null=True)),
                ('arsen_as', models.FloatField(blank=True, db_column='Arsen-As', null=True)),
                ('arsen_uorganisk', models.FloatField(blank=True, db_column='Arsen-uorganisk', null=True)),
                ('cadmium_cd', models.FloatField(blank=True, db_column='Cadmium-Cd', null=True)),
                ('bly_pb', models.FloatField(blank=True, db_column='Bly-Pb', null=True)),
                ('tin_sn', models.FloatField(blank=True, db_column='Tin-Sn', null=True)),
                ('l_mælkesyre', models.FloatField(blank=True, db_column='L-mælkesyre', null=True)),
                ('d_mælkesyre', models.FloatField(blank=True, db_column='D-mælkesyre', null=True)),
                ('mælkesyre_total', models.FloatField(blank=True, db_column='Mælkesyre-total', null=True)),
                ('citronsyre', models.FloatField(blank=True, db_column='Citronsyre', null=True)),
                ('oxalsyre', models.FloatField(blank=True, db_column='Oxalsyre', null=True)),
                ('æblesyre', models.FloatField(blank=True, db_column='Æblesyre', null=True)),
                ('benzoesyre', models.FloatField(blank=True, db_column='Benzoesyre', null=True)),
                ('organiske_syrer_tot_field', models.FloatField(blank=True, db_column='Organiske-syrer-tot.', null=True)),
                ('histamin', models.FloatField(blank=True, db_column='Histamin', null=True)),
                ('tyramin', models.FloatField(blank=True, db_column='Tyramin', null=True)),
                ('phenylethylamin', models.FloatField(blank=True, db_column='Phenylethylamin', null=True)),
                ('putrescin', models.FloatField(blank=True, db_column='Putrescin', null=True)),
                ('cadaverin', models.FloatField(blank=True, db_column='Cadaverin', null=True)),
                ('spermin', models.FloatField(blank=True, db_column='Spermin', null=True)),
                ('spermidin', models.FloatField(blank=True, db_column='Spermidin', null=True)),
                ('serotonin', models.FloatField(blank=True, db_column='Serotonin', null=True)),
                ('fruktose', models.FloatField(blank=True, db_column='Fruktose', null=True)),
                ('galaktose', models.FloatField(blank=True, db_column='Galaktose', null=True)),
                ('glukose', models.FloatField(blank=True, db_column='Glukose', null=True)),
                ('monosaccharider_total', models.FloatField(blank=True, db_column='Monosaccharider-total', null=True)),
                ('laktose', models.FloatField(blank=True, db_column='Laktose', null=True)),
                ('maltose', models.FloatField(blank=True, db_column='Maltose', null=True)),
                ('sakkarose', models.FloatField(blank=True, db_column='Sakkarose', null=True)),
                ('disaccharider_total', models.FloatField(blank=True, db_column='Disaccharider-total', null=True)),
                ('raffinose', models.FloatField(blank=True, db_column='Raffinose', null=True)),
                ('andre_sukkerarter', models.FloatField(blank=True, db_column='Andre-sukkerarter', null=True)),
                ('sukkerarter_ialt', models.FloatField(blank=True, db_column='Sukkerarter-ialt', null=True)),
                ('sorbitol', models.FloatField(blank=True, db_column='Sorbitol', null=True)),
                ('inositol', models.FloatField(blank=True, db_column='Inositol', null=True)),
                ('maltitol', models.FloatField(blank=True, db_column='Maltitol', null=True)),
                ('sukkeralkoholer_total', models.FloatField(blank=True, db_column='Sukkeralkoholer-total', null=True)),
                ('idf', models.FloatField(blank=True, db_column='IDF', null=True)),
                ('sdfp', models.FloatField(blank=True, db_column='SDFP', null=True)),
                ('sdfs', models.FloatField(blank=True, db_column='SDFS', null=True)),
                ('hexose', models.FloatField(blank=True, db_column='Hexose', null=True)),
                ('pentose', models.FloatField(blank=True, db_column='Pentose', null=True)),
                ('uronic_acid', models.FloatField(blank=True, db_column='Uronic-Acid', null=True)),
                ('cellulose', models.FloatField(blank=True, db_column='Cellulose', null=True)),
                ('lignin', models.FloatField(blank=True, db_column='Lignin', null=True)),
                ('crude_fibre', models.FloatField(blank=True, db_column='Crude-fibre', null=True)),
                ('andre_mættede_fedtsyrer', models.FloatField(blank=True, db_column='Andre-mættede-fedtsyrer', null=True)),
                ('andre_monoumættede_fedtsyrer', models.FloatField(blank=True, db_column='Andre-monoumættede-fedtsyrer', null=True)),
                ('andre_polyumættede', models.FloatField(blank=True, db_column='Andre-polyumættede', null=True)),
                ('andre_fedtsyrer', models.FloatField(blank=True, db_column='Andre-fedtsyrer', null=True)),
                ('sum_mættede', models.FloatField(blank=True, db_column='Sum-mættede', null=True)),
                ('sum_monoumættede', models.FloatField(blank=True, db_column='Sum-monoumættede', null=True)),
                ('sum_polyumættede', models.FloatField(blank=True, db_column='Sum-polyumættede', null=True)),
                ('transfedtsyrer_total', models.FloatField(blank=True, db_column='Transfedtsyrer-total', null=True)),
                ('fedtsyrer_total', models.FloatField(blank=True, db_column='Fedtsyrer-total', null=True)),
            ],
            options={
                'db_table': 'nutrient',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('common_key_recipe', models.IntegerField(primary_key=True, serialize=False)),
                ('Navn', models.TextField(blank=True, db_column='name', null=True)),
                ('Link', models.TextField(blank=True, db_column='link', null=True)),
                ('Beskrivelse', models.TextField(blank=True, db_column='description', null=True)),
                ('Kalorier', models.IntegerField(blank=True, db_column='calories', null=True)),
                ('Protein', models.IntegerField(blank=True, db_column='protein', null=True)),
                ('Kulhydrater', models.IntegerField(blank=True, db_column='carbs', null=True)),
                ('Fedt', models.IntegerField(blank=True, db_column='fat', null=True)),
            ],
            options={
                'db_table': 'recipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Steps',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_step', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'steps',
                'managed': False,
            },
        ),
    ]
